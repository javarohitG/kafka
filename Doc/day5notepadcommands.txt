https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.39.tar.gz


name=mysql-source-etl
connector.class=io.confluent.connect.jdbc.JdbcSourceConnector
tasks.max=10

connection.url=jdbc:mysql://172.20.0.109:3306/trainingdb?user=root&password=rps@12345
#list of tables to be import from the database
table.whitelist=account
#whenever the auto incrementing column's value increments, the row will be published.
#incremental load-------whenever a new row is inserted, it is published to the topic
mode=incrementing
#auto increment column
incrementing.column.name=account_no
#the topic name will be etl-mysql-topic-account
topic.prefix=etl-mysql-topic-




./confluent start schema-registry



bin/connect-standalone  etc/schema-registry/connect-avro-standalone.properties etc/kafka-connect-jdbc/mysql-connect-source.properties 



./kafka-avro-console-consumer --topic etl-mysql-topic-account --bootstrap-server localhost:9092 --from-beginning


 <repositories>
  <repository>
  <id>avro</id>
  <url>https://maven.repository.redhat.com/earlyaccess/all/</url>
  </repository>
  </repositories>
  <dependencies>
  <!-- https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer -->
<dependency>
    <groupId>io.confluent</groupId>
    <artifactId>kafka-avro-serializer</artifactId>
    <version>5.3.0</version>
</dependency>
  
  </dependencies>

{
"type":"record",
"namespace":"com.jpmc.training",
"name":"customer",
"fields":[
{"name":"id","type":"int"},
{"name":"name","type":"string"},
{"name":"email","type":"string"}
]
}



package com.jpmc.training.avrosender;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

import org.apache.avro.Schema;
import org.apache.avro.Schema.Parser;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericRecord;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import io.confluent.kafka.serializers.KafkaAvroSerializer;

public class AvroSenderTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Properties props=new Properties();
		props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
		props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class.getName());
		props.put("schema.registry.url", "http://localhost:8081");
		KafkaProducer<String, GenericRecord> producer=new KafkaProducer<>(props);
		
		byte[] schema=new byte[1024];
		try {
			FileInputStream fin=new FileInputStream("customer.avsc");
			fin.read(schema);
			fin.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Parser parser=new Schema.Parser();
		Schema sch=parser.parse(new String(schema));
		
		GenericRecord genRecord=new GenericData.Record(sch);
		genRecord.put("id", 5001);
		genRecord.put("name", "Arvind");
		genRecord.put("email", "arvind@gmail.com");
		
		ProducerRecord<String, GenericRecord> rec=new ProducerRecord<String, GenericRecord>("test-avro-topic",
				"test-data"	, genRecord);
		
		producer.send(rec);
		System.out.println("message sent");
		producer.close();
 	}

}



./kafka-topics --create --topic test-avro-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181


./kafka-avro-console-consumer --topic test-avro-topic --bootstrap-server localhost:9092 --from-beginning

curl -X GET http://localhost:8081/subjects

curl -X GET http://localhost:8081/subjects/test-avro-topic-value/versions


curl -X GET http://localhost:8081/subjects/test-avro-topic-value/versions/1


curl -X GET http://localhost:8081/schemas/ids/62


./confluent start kafka-rest


curl -X GET http://localhost:8082/topics


curl -X GET http://localhost:8082/topics/test-avro-topic


curl -X GET http://localhost:8082/topics/test-avro-topic/partitions

curl -X GET http://localhost:8082/topics/test-avro-topic/partitions/0



./kafka-topics --create --topic test-rest-topic --partitions 3 --replication-factor 1 --zookeeper localhost:2181


curl -X GET http://localhost:8082/topics/test-rest-topic/partitions

curl -X POST -H "Content-Type: application/vnd.kafka.json.v2+json" --data '{"records":[{"value":{"id":1121,"name":"Rakesh","designation":"Accountant"}}]}' http://localhost:8082/topics/test-rest-topic

/kafka-console-consumer --topic test-rest-topic --bootstrap-server localhost:9092 --from-beginning

./confluent  start ksql-server

To start ksql client,
./ksql


list topics;


ksql> create stream employee_stream(id int,name varchar,designation varchar) with (kafka_topic='test-rest-topic',value_format='json');

ksql> list streams;

ksql> set 'auto.offset.reset'='earliest';


ksql> select id,name,designation from employee_stream;

./kafka-console-producer --topic test-rest-topic --broker-list localhost:9092



{"id":2333,"name":"Amarnath","designation":"Developer"}

{"id":2666,"name":"Surya","designation":"Developer"}

{"id":234343,"name":"Arvind","designation":"Accountant"}



select designation,count(*) from employee_stream group by designation;


./confluent start control-center



# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://localhost:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
enable.auto.commit=false

listeners=SASL_PLAINTEXT://localhost:9092
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.mechanism.inter.broker.protocol=PLAIN
sasl.enabled.mechanisms=PLAIN

KafkaServer {
   org.apache.kafka.common.security.plain.PlainLoginModule required
   username="admin"
   password="admin-secret"
   user_admin="admin-secret"
   user_alice="alice-secret"
   user_user1="pass1";
};




bin\windows\zookeeper-server-start.bat config\zookeeper.properties

C:\kafka_2.12-2.5.0>set KAFKA_OPTS=-Djava.security.auth.login.config=config/server-jaas.config

C:\kafka_2.12-2.5.0>bin\windows\kafka-server-start.bat config\server-secure.properties


security.protocol=SASL_PLAINTEXT
sasl.mechanism=PLAIN

KafkaClient {
  org.apache.kafka.common.security.plain.PlainLoginModule required
  username="alice"
  password="alice-secret";
};



kafka-topics.bat --create --topic test-security-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181


kafka-console-producer.bat --topic test-security-topic --bootstrap-server localhost:9092 


kafka-console-producer.bat --topic test-security-topic --bootstrap-server localhost:9092  --producer.config=c:/clientproducer/client.properties


C:\kafka_2.12-2.5.0\bin\windows>set KAFKA_OPTS=-Djava.security.auth.login.config=c:/clientproducer/producer-jaas.config

C:\kafka_2.12-2.5.0\bin\windows>kafka-console-producer.bat --topic test-security-topic --bootstrap-server localhost:9092  --producer.config=c:/clientproducer/client.properties


		

KafkaClient {
  org.apache.kafka.common.security.plain.PlainLoginModule required
  username="user1"
  password="pass1";
};



C:\kafka_2.12-2.5.0\bin\windows>set KAFKA_OPTS=-Djava.security.auth.login.config=c:/clientconsumer/consumer-jaas.config

C:\kafka_2.12-2.5.0\bin\windows>kafka-console-consumer.bat --topic test-security-topic --consumer.config=c:/clientconsumer/client.properties --bootstrap-server localhost:9092





