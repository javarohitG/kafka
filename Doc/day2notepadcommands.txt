bin\windows\zookeeper-server-start.bat config\zookeeper.properties

bin\windows\kafka-server-start.bat config\server.properties


kafka-topics.bat --create --topic first-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181

kafka-topics.bat --list --zookeeper localhost:2181

kafka-topics.bat --describe --topic first-topic --zookeeper localhost:2181

kafka-console-producer.bat --topic first-topic --bootstrap-server localhost:9092

kafka-console-consumer.bat --topic first-topic --bootstrap-server localhost:9092

kafka-dump-log.bat --print-data-log --files c:\tmp\kafka-logs\first-topic-0\00000000000000000000.log


<dependencies>
  <!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients -->
<dependency>
    <groupId>org.apache.kafka</groupId>
    <artifactId>kafka-clients</artifactId>
    <version>2.5.0</version>
</dependency>
  
  </dependencies>


package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SimpleSender {
public static void main(String[] args) {
	Properties props=new Properties();
	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	
	KafkaProducer<String,String> producer=new KafkaProducer<>(props);
	String topic="first-topic";
	for(int i=1;i<=10;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, "This is a test message "+i);
		producer.send(record);
	}
	System.out.println("messages sent");
	producer.close();
}
}





package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SimpleSender {
public static void main(String[] args) {
	Properties props=new Properties();
	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	
	KafkaProducer<String,String> producer=new KafkaProducer<>(props);
	String topic="first-topic";
	for(int i=1;i<=10;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"first-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=11;i<=20;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"second-key","This is a test message "+i);
		producer.send(record);
	}
	System.out.println("messages sent");
	producer.close();
}
}



package com.jpmc.training.receiver;

import java.time.Duration;
import java.util.Collection;
import java.util.Collections;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;

public class SimpleReceiver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Properties props=new Properties();
		props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		props.put(ConsumerConfig.GROUP_ID_CONFIG,"group-1");
		
		KafkaConsumer<String, String> consumer=new KafkaConsumer<>(props);
		
		Collection<String> topics=Collections.singletonList("first-topic");
		
		consumer.subscribe(topics);
		
		while(true) {
			ConsumerRecords<String, String> records=consumer.poll(Duration.ofSeconds(20));
			records.forEach(record->{
				System.out.println("key: "+record.key()+"\tvalue: "+record.value()+"\tpartition: "+record.partition());
			});
		}
		
		

	}

}




kafka-console-consumer.bat --topic first-topic --bootstrap-server localhost:9092 --group group-1




package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SimpleSender {
public static void main(String[] args) {
	Properties props=new Properties();
	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	
	KafkaProducer<String,String> producer=new KafkaProducer<>(props);
	String topic="first-topic";
	for(int i=1;i<=10;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"first-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=11;i<=20;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"second-key","This is a test message "+i);
		producer.send(record);
	}
	
	for(int i=21;i<=30;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"third-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=31;i<=40;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"fourth-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=41;i<=50;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"fifth-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=51;i<=60;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"sixth-key","This is a test message "+i);
		producer.send(record);
	}
	System.out.println("messages sent");
	producer.close();
}
}


package com.jpmc.training.sender;

public class HashCodeTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		System.out.println("sixth-key".hashCode());
	}

}


package com.jpmc.training.partitioner;

import java.util.Map;

import org.apache.kafka.clients.producer.Partitioner;
import org.apache.kafka.common.Cluster;

public class MessagePartitioner implements Partitioner{

	@Override
	public void configure(Map<String, ?> arg0) {
		// TODO Auto-generated method stub
		System.out.println("***************configuring******************");
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		System.out.println("***************closing******************");
	}

	@Override
	public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) {
		// TODO Auto-generated method stub
		
		int partition=3;
		if(key.equals("first-key")) {
			partition=0;
		}
		else if(key.equals("second-key")) {
			partition=1;
		}
		else if(key.equals("third-key")) {
			partition=2;
		}
		System.out.println("sending message with key "+key+" to partition "+partition);
		return partition;
	}

}






package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import com.jpmc.training.partitioner.MessagePartitioner;

public class SenderWithCustomPartitioner {
public static void main(String[] args) {
	Properties props=new Properties();
	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, MessagePartitioner.class.getName());
	
	KafkaProducer<String,String> producer=new KafkaProducer<>(props);
	String topic="first-topic";
	for(int i=1;i<=10;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"first-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=11;i<=20;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"second-key","This is a test message "+i);
		producer.send(record);
	}
	
	for(int i=21;i<=30;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"third-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=31;i<=40;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"fourth-key","This is a test message "+i);
		
		producer.send(record);
	}
	for(int i=41;i<=50;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"fifth-key","This is a test message "+i);
		producer.send(record);
	}
	for(int i=51;i<=60;i++) {
		//Each message is represented as a ProducerRecord
		ProducerRecord<String, String> record=new ProducerRecord<String, String>(topic, 
				"sixth-key","This is a test message "+i);
		producer.send(record);
	}
	System.out.println("messages sent");
	producer.close();
}
}



package com.jpmc.training.domain;

public class Employee {
	private int empId;
	private String name;
	private String designation;
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDesignation() {
		return designation;
	}
	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public Employee(int empId, String name, String designation) {
		super();
		this.empId = empId;
		this.name = name;
		this.designation = designation;
	}
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
	
}


<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.12.4</version>
</dependency>



package com.jpmc.training.serializer;

import org.apache.kafka.common.serialization.Serializer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.training.domain.Employee;

public class EmployeeSerializer implements Serializer<Employee>{

	private ObjectMapper mapper=new ObjectMapper();
	@Override
	public byte[] serialize(String topic, Employee employee) {
		// TODO Auto-generated method stub
		byte[] array=null;
		try {
			array=mapper.writeValueAsBytes(employee);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return array;
	}

}


kafka-topics.bat --create --topic emp-topic --zookeeper localhost:2181 --partitions 3 --replication-factor 1

kafka-topics.bat --list  --zookeeper localhost:2181


package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import com.jpmc.training.domain.Employee;
import com.jpmc.training.serializer.EmployeeSerializer;

public class EmployeeSender {
public static void main(String[] args) {
	Properties props=new Properties();
	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
	props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeSerializer.class.getName());
	
	KafkaProducer<String,Employee> producer=new KafkaProducer<>(props);
	String topic="emp-topic";
	
	ProducerRecord<String, Employee> record1=new ProducerRecord<String, Employee>(topic, "emp-1",
			new Employee(1001, "Arjun", "Developer"));
	
	ProducerRecord<String, Employee> record2=new ProducerRecord<String, Employee>(topic, "emp-2",
			new Employee(1002, "Deva", "Accountant"));
	
	producer.send(record1);
	producer.send(record2);
	System.out.println("messages sent");
	producer.close();
}
}


kafka-console-consumer.bat --topic emp-topic --property print.key=true --bootstrap-server localhost:9092


package com.jpmc.training.deserializer;

import java.io.IOException;

import org.apache.kafka.common.serialization.Deserializer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.training.domain.Employee;

public class EmployeeDeserializer implements Deserializer<Employee>{

	private ObjectMapper mapper=new ObjectMapper();
	@Override
	public Employee deserialize(String topic, byte[] array) {
		// TODO Auto-generated method stub
		Employee employee=null;
		try {
			employee=mapper.readValue(array, Employee.class);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return employee;
	}
}




package com.jpmc.training.deserializer;

import java.io.IOException;

import org.apache.kafka.common.serialization.Deserializer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.training.domain.Employee;

public class EmployeeDeserializer implements Deserializer<Employee>{

	private ObjectMapper mapper=new ObjectMapper();
	@Override
	public Employee deserialize(String topic, byte[] array) {
		// TODO Auto-generated method stub
		Employee employee=null;
		try {
			employee=mapper.readValue(array, Employee.class);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return employee;
	}
}



package com.jpmc.training.receiver;

import java.time.Duration;
import java.util.Collection;
import java.util.Collections;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;

import com.jpmc.training.deserializer.EmployeeDeserializer;
import com.jpmc.training.domain.Employee;

public class EmployeeReceiver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Properties props=new Properties();
		props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, EmployeeDeserializer.class.getName());
		props.put(ConsumerConfig.GROUP_ID_CONFIG,"group-2");
		
		KafkaConsumer<String, Employee> consumer=new KafkaConsumer<>(props);
		
		Collection<String> topics=Collections.singletonList("emp-topic");
		
		consumer.subscribe(topics);
		
		while(true) {
			ConsumerRecords<String, Employee> records=consumer.poll(Duration.ofSeconds(20));
			records.forEach(record->{
				System.out.println("key: "+record.key()+"\tpartition: "+record.partition());
				System.out.println("Value");
				Employee e=record.value();
				System.out.println(e.getEmpId()+"\t"+e.getName()+"\t"+e.getDesignation());
			});
		}
		
		

	}

}



