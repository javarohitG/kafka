Kafka Setup and Verification:

1. Download jdk 1.8 /jre 1.8 from https://www.oracle.com/in/java/technologies/javase/javase-jdk8-downloads.html#license-lightbox and install it.
2. set the JAVA_HOME environment variable.
3. Download Apache Kafka from https://archive.apache.org/dist/kafka/2.5.0/kafka_2.12-2.5.0.tgz and extract it to c:\

kafka_2.12-2.5.0.tgz-------------The scala version used to develop kafka is 2.12 and the kafka version is 2.5.0.

Under kafka there are 4 subdirectories.

bin----------------binary scripts for starting,configuring and stopping the kafka server (unix flavour).
       bin\windows---------------binary scripts for windows platform.
libs---------------contains the java and scala libraries in the form of jar files.

Jar files contain collection of .class files.


config-------------contains the configuration files--------Mostly the configuration files are in the form of .properties files.

site-docs-----------contains the documentation.

4. start the zookeeper.

Zookeeper is a service used Kafka to maintain its meta data.
open a new command command window, navigate to c:\/kafka_2.12-2.5.0 and execute the following command.

bin\windows\zookeeper-server-start.bat config\zookeeper.properties

By default, zookeeper starts at port 2181.

5. start the kafka server

open a new command command window, navigate to c:\/kafka_2.12-2.5.0 and execute the following command.

bin\windows\kafka-server-start.bat config\server.properties

By default, kafka server starts at port 9092.

6. create a topic called first-topic.

open a new command command window, navigate to c:\/kafka_2.12-2.5.0\bin\windows and execute the following command.

kafka-topics.bat --create --topic first-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181


7. start a kafka console producer

open a new command command window, navigate to c:\/kafka_2.12-2.5.0\bin\windows and execute the following command.


kafka-console-producer.bat --topic first-topic --bootstrap-server localhost:9092

7. start a kafka console consumer

open a new command command window, navigate to c:\/kafka_2.12-2.5.0\bin\windows and execute the following command.


kafka-console-consumer.bat --topic first-topic --bootstrap-server localhost:9092



Maven:

It is a build tool used for java. In the java community forum, there is a common agreement that any open source library is hosted at mvnrepository.com.
Each library(jar) is identified by a dependency.
Each dependency has 3 attributes namely group-id,artifact-id and dependency.

The confiuration file for maven is pom.xml.

Each message contains two parts.

1. key (optional)
2. value

For some of the fundamental java classes like String,Integer and other wrapper classes, kafka api provides inbuilt serializers and deserializers.


Kafka guarantees that all the messages with the same key go to the same partition.

Consumer Group ensures that the messages are equally shared between consumers.

Also it guarantees that if one member of the group has already consumed the message, another member of the same group will not consume the same 
message.



When multiple consumers belong to the same group are running, the partitions will be shared between them.

ie
if there are four partitions and only one consumer is running, that single consumer will consume from all 4 partitons.
if two consumers are running, each consumer will be assigned two partitions.
if three consumers are running, one consumer may be assigned two partitons and the two remaining consumers will be assigned one partition each.
if four consumers are running, each consumer will be assigned one partition each.
if five or more consumers are running, only four consumers will be receiving messages and the remaining consumers will be idle.

ie a single partition can't be shared between multiple consumers.


default partitioning logic:

the partition to which the current message goes=hash code of the key % no_of_partitions


key		partition
first-key		0
second-key	1
third-key		2
any other key	3


Custom Partitioner  should implement an interface called Partitioner which has 3 methods.

1. configure()--------------------initialization logic ---------invoked only once
2. partition()----------------------partitioning logic----------invoked for each message
3. close()-------------------------cleanup logic---------------invoked only once


Java objects are converted to json format as the intermediate format and then converted to a byte[].

For this, json parsers like Jackson,Jettison and Moxy can be used.

Json parser compliant Java class should 

1. have Getter and Setter methods for all the data members.
2. have no argument constructor.
3. be a public class.



CustomSerializer should implement an interface called Serializer which contains a method called serialize().

CustomDeserializer should implement an interface called Deserializer which contains a method called deserialize().


